"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var SeqIDs = /** @class */ (function () {
    function SeqIDs(outBase) {
        this.outBase = outBase;
        this.nextID = 0;
        this.reserved = [];
        this.reservedStrings = [];
    }
    /**
     * Generates a new ID. Will be numeric if outBase is not specified in the constructor
     * or is 10, otherwise it will be an alphanumeric string.
     */
    SeqIDs.prototype.new = function () {
        var newID = this.nextID++;
        if (includes(this.reserved, newID)) {
            return this.new();
        }
        else {
            return this.prep(newID);
        }
    };
    /**
     * Reserve an ID so that it can't be generated by the roller.
     * @param id The ID to be reserved (string or number)
     * @returns The ID
     * @throws if the ID is already reserved.
     */
    SeqIDs.prototype.reserve = function (id) {
        var _this = this;
        var additionalIDs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additionalIDs[_i - 1] = arguments[_i];
        }
        if (additionalIDs.length > 0) {
            return __spreadArrays([id], additionalIDs).map(function (value) { return _this.reserveOne(value); });
        }
        else {
            return this.reserveOne(id);
        }
    };
    SeqIDs.prototype.reserveOne = function (id) {
        var num;
        if (typeof id == "string") {
            num = parseInt(id, this.outBase);
            if (num == NaN) {
                if (includes(this.reservedStrings, id)) {
                    throw "Reserved string " + id + " already reserved!";
                }
                else {
                    return id;
                }
            }
        }
        else {
            num = id;
        }
        if (includes(this.reserved, num)) {
            throw "Reserved ID " + id + " (" + num + ") already reserved!";
        }
        else {
            this.reserved.push(num);
            return typeof id == "string" ? id : this.prep(num);
        }
    };
    SeqIDs.prototype.prep = function (num) {
        if (this.outBase && this.outBase != 10) {
            return num.toString(this.outBase);
        }
        else {
            return num;
        }
    };
    return SeqIDs;
}());
exports.default = SeqIDs;
function includes(array, thing) {
    for (var i = 0; i < array.length; i++) {
        if (array[i] == thing) {
            return true;
        }
    }
    return false;
}
