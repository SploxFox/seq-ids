export default class SeqIDs {
    private nextID = 0;
    private reserved: number[] = [];
    private reservedStrings: string[] = [];
    constructor(private readonly outBase?: number) {

    }

    /**
     * Generates a new ID. Will be numeric if outBase is not specified in the constructor
     * or is 10, otherwise it will be an alphanumeric string.
     */
    new(): string | number {
        const newID = this.nextID++;
        if (includes(this.reserved, newID)) {
            return this.new();
        } else {
            return this.prep(newID);
        }
    }

    /**
     * Reserve an ID so that it can't be generated by the roller.
     * @param id The ID to be reserved (string or number)
     * @returns The ID
     * @throws if the ID is already reserved.
     */
    reserve(id: string | number, ...additionalIDs: (string | number)[]): string | number | (string | number)[] {
        if (additionalIDs.length > 0) {
            return [id, ...additionalIDs].map((value) => this.reserveOne(value));
        } else {
            return this.reserveOne(id);
        }
    }

    private reserveOne(id: string | number) {
        let num: number;
        if (typeof id == "string") {
            num = parseInt(id, this.outBase);
            if (num == NaN) {
                if (includes(this.reservedStrings, id)) {
                    throw `Reserved string ${id} already reserved!`
                } else {
                    return id;
                }
            }
        } else {
            num = id;
        }

        if (includes(this.reserved, num)) {
            throw `Reserved ID ${id} (${num}) already reserved!`
        } else {
            this.reserved.push(num);
            return typeof id == "string" ? id : this.prep(num);
        }
    }

    private prep(num: number) {
        if (this.outBase && this.outBase != 10) {
            return num.toString(this.outBase);
        } else {
            return num;
        }
    }
}

function includes<T>(array: T[], thing: T): boolean {
    for (let i = 0; i < array.length; i++) {
        if (array[i] == thing) {
            return true;
        }
    }

    return false;
}